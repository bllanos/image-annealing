#!/usr/bin/env bash
#
# This script runs the example described in the [README](./README.md).
# Run this script from the root directory of this repository.
#
# This script does not accept any arguments, but there are variables defined in the script
# that you can change to produce different output.
#
# Notes
# -----
#
# One can achieve much better performance using the `image_annealing` library's API within a Rust program
# than using the CLI in an equivalent shell script.
#
# This script is intended to be a simple demonstration of the CLI, and is not written to be robust or fast.

# The image width used throughout the example.
# For simplicity, square images are created, so this variable also sets the image height.
IMAGE_WIDTH=200

# Stop the script on any error
set -e -u -o pipefail

# Define script output locations
BASE_OUTPUT_DIRECTORY="examples_output/image_annealing_cli_bin_dot"
RELATIVE_SWAP_OUTPUT_DIRECTORY="swap_permutations"
SWAP_OUTPUT_DIRECTORY="${BASE_OUTPUT_DIRECTORY}/${RELATIVE_SWAP_OUTPUT_DIRECTORY}"
RELATIVE_IMAGE_OUTPUT_DIRECTORY="permuted_images"
IMAGE_OUTPUT_DIRECTORY="${BASE_OUTPUT_DIRECTORY}/${RELATIVE_IMAGE_OUTPUT_DIRECTORY}"

# Delete any output from previous runs before starting
rm -rf "${BASE_OUTPUT_DIRECTORY}"
mkdir -p "${BASE_OUTPUT_DIRECTORY}"
mkdir -p "${SWAP_OUTPUT_DIRECTORY}"
mkdir -p "${IMAGE_OUTPUT_DIRECTORY}"

# Generate input files by running the program defined in main.rs
cargo run -p image_annealing_cli_bin --release --example dot -- "${IMAGE_WIDTH}"

# Build the CLI
cargo build -p image_annealing_cli_bin --release --bins

# Create permutation operation
# ----------------------------
#
# This operation generates an identity permutation that will be used as the initial permutation.
CREATE_PERMUTATION_CONFIG_FILE="${BASE_OUTPUT_DIRECTORY}/create_permutation_config.json"
cat << _FILE_CONTENTS_ > "${CREATE_PERMUTATION_CONFIG_FILE}"
{
  "CreatePermutation": {
    "image_dimensions": {
      "width": ${IMAGE_WIDTH},
      "height": ${IMAGE_WIDTH}
    },
    "permutation_output_path_no_extension": "initial_permutation"
  }
}
_FILE_CONTENTS_
# The CLI reads JSON files that define the operations to be performed.
target/release/main --config "${CREATE_PERMUTATION_CONFIG_FILE}"

# Swap operation
# --------------
#
# This operation generates a sequences of permutations. The permutations change
# from the identity permutation created above into a permutation
# that better matches the displacement goal generated by main.rs
target/release/main --config image_annealing_cli_bin/examples/dot/config/swap.json

# Permute operation
# -----------------
#
# The largest section of this script loops over the permutations generated above and
# applies each permutation to the dot image generated earlier by main.rs

# This image was generated by main.rs above
RELATIVE_INPUT_IMAGE_FILE="image.png"
INPUT_IMAGE_FILE="${BASE_OUTPUT_DIRECTORY}/${RELATIVE_INPUT_IMAGE_FILE}"

# Example of using [ImageMagick](https://imagemagick.org/) to make sure the input image has an alpha channel
# See https://imagemagick.org/script/command-line-options.php#alpha
# Uncomment and update the following lines if you want to use an input image file
# that may not have the expected format.
#
# RAW_INPUT_IMAGE_FILE="some_image.jpeg"
# convert -alpha opaque "${RAW_INPUT_IMAGE_FILE}" "${INPUT_IMAGE_FILE}"

# In order to generate images with sequential file names, we first
# count the number of permutations so that we know how many characters
# to use for sequence numbers in file names.
NUMBER_OF_FILES=$(find "${SWAP_OUTPUT_DIRECTORY}" -maxdepth 1 -type f -name '*.png' -printf x | wc -c)
FIELD_WIDTH=${#NUMBER_OF_FILES}

# Copy the original input image as the zeroeth permuted image,
# the first image in the sequence.
PADDED_NUMBER="$(printf "%0${FIELD_WIDTH}d" "0")"
cp "${INPUT_IMAGE_FILE}" "${IMAGE_OUTPUT_DIRECTORY}/${PADDED_NUMBER}.png"

# This JSON file defines the permute operation, and will be updated to refer
# to each permutation in turn.
PERMUTE_CONFIG_FILE="${BASE_OUTPUT_DIRECTORY}/permute_config.json"

# Loop over permutations
i=1 # Iteration counter
ROUND=0 # The sequence number of the round of swap passes corresponding to the current permutation
PASS=0 # The sequence number of the swap pass corresponding to the current permutation
while [ $i -le "${NUMBER_OF_FILES}" ]; do
    # Generate the file name of the i-th permutation,
    # so that the file name can be written into the JSON file.
    PERMUTATION_FILE="${RELATIVE_SWAP_OUTPUT_DIRECTORY}/permutation_round_${ROUND}_pass_${PASS}"
    case $PASS in
        0) PERMUTATION_FILE="${PERMUTATION_FILE}_horizontal.png";;
        1) PERMUTATION_FILE="${PERMUTATION_FILE}_vertical.png";;
        2) PERMUTATION_FILE="${PERMUTATION_FILE}_offset_horizontal.png";;
        3) PERMUTATION_FILE="${PERMUTATION_FILE}_offset_vertical.png";;
        *)
            echo "invalid swap pass index"
            exit 1;;
    esac

    echo "Permuting with ${PERMUTATION_FILE}"

    # Update the JSON configuration file
    PADDED_NUMBER="$(printf "%0${FIELD_WIDTH}d" "$i")"
    cat << _FILE_CONTENTS_ > "${PERMUTE_CONFIG_FILE}"
{
  "Permute": {
    "candidate_permutation": "${PERMUTATION_FILE}",
    "original_image": {
      "Rgba8": "${RELATIVE_INPUT_IMAGE_FILE}"
    },
    "permuted_image_output_path_no_extension": {
      "Rgba8": "${RELATIVE_IMAGE_OUTPUT_DIRECTORY}/${PADDED_NUMBER}"
    }
  }
}
_FILE_CONTENTS_
    # Run the permute operation
    target/release/main --config "${PERMUTE_CONFIG_FILE}"

    # Update loop variables for the next iteration
    i=$(( i + 1 ))
    PASS=$(( PASS + 1 ))
    if [ "${PASS}" -ge 4 ]; then
        PASS=0
        ROUND=$(( ROUND + 1 ))
    fi
done

# [Optional] Animated GIF generation
# ----------------------------------
#
# Convert the sequence of permuted images into an animation
#
# Animated GIF generation requires [ImageMagick](https://imagemagick.org/) to be installed.
# There are probably other programs that can be used to generate animations from sequences
# of image files. ImageMagick is easy to use from a script.
# Uncomment the following lines to generate an animation file.

# ANIMATION_FILE="${BASE_OUTPUT_DIRECTORY}/animation.gif"
# echo "Generating animation ${ANIMATION_FILE}..."
# convert -dispose none "${IMAGE_OUTPUT_DIRECTORY}/*.png" -set delay 1 -loop 0 "${ANIMATION_FILE}"